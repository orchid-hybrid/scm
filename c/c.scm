(define (mangle s)
  (define (hyphen-down char)
    (if (equal? char #\-)
        #\_
        char))
  (list->string (map hyphen-down (string->list (symbol->string s)))))

(define (mangle* s n)
  (let ((m (mangle s)))
    (cond ((or (equal? s 'invoke-closure)
               (equal? s 'vector))
           (string-append "scm_" (string-append m (number->string n))))
          ((or (equal? s 'make-closure)
               (equal? s 'vector-ref))
           (string-append "scm_" m))
          (else m))))

(define (string-quote s)
  (string-append "\"" (string-append s "\"")))

(define (emit-call f args)
  (cond ((and (equal? f 'vector-ref)
              (= 2 (length args))
              (equal? (car args) 'env))
         (display "env[")
         (display (cadr args))
         (display "]"))
        (else
         (display (mangle* f (length args)))
         (display "(")
         (let ((n (length args)))
           (cond ((= n 0))
                 ((> n 0)
                  (emit-c (car args))
                  (for-each (lambda (arg)
                              (display ",")
                              (emit-c arg))
                            (cdr args)))))
         (display ")"))))

(define (emit-c term)
  (cond ((number? term)
         (display term))
        ((string? term)
         (display "scm_string")
         (display "(")
         (display (string-quote term))
         (display ")"))
        ((symbol? term)
         (display (mangle term)))
        ((list? term)
         (emit-call (car term) (cdr term)))
        (else (error term "emit-c!"))))

(define (test-c term)
  (let ((collector (make-collector)))
    (let* ((cc (perform-closure-conversion term))
           (main ((hoist (cdr collector)) cc))
           (definitions ((car collector))))
      (display "#include \"scm.h\"")
      (newline)
      (newline)
      (for-each (lambda (definition)
                  ;;(define name (lambda (args) body))
                  (let ((name (cadr definition))
                        (args (cadr (caddr definition)))
                        (body (caddr (caddr definition))))
                    (display "scm ")
                    (display (mangle name))
                    (display "(")
                    (display "scm* env")
                    (for-each (lambda (arg)
                                (display ", ")
                                (display "scm ")
                                (display (mangle arg)))
                              (cdr args))
                    (display ") {")
                    (newline)
                    (display "  return ")
                    (emit-c body)
                    (display ";")
                    (newline)
                    (display "}")
                    (newline)
                    (newline)))
                definitions)
      (display "void main() {")
      (newline)
      (display "  ")
      (emit-c main)
      (display ";")
      (newline)
      (display "}")
      (newline)
      )))
